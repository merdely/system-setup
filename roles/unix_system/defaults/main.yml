# unix_system defaults
#
## Changes should not be made to this file. They should be made in vars/main.yml.
#
# user_files is a list of file sets where:
#   - type: can be 'web' or 'file'
#   - src: points to the web or file location to copy from
#   - dest: is where the file should be copied/downloaded to
#   - (optional) mode: is the permissions for the dest file ('0644' or '0600')
#
# user_includes is a list of file sets where:
#   - user_file: user file to be included in another file
#   - include_in: file on the system to include user_file with '[ -r {{ user_file }} ] && . {{ user_file }}'
---
## Custom configuration options
## *_custom_files is a list of files that can be installed from the ansible server or a web site
# - type: can be 'file' or 'web'
# - src: path to file on ansible server or a URL
# - dest: the destination on the target system
# - mode: permissions on the destination file
# - owner/group: ownership of the destination file
# - dirmode: the permissions on any directories created in the destination file path
# - become: if elevated access is required to write the file
# - os_family: a list of ansible_os_family values for which the file pertains
# - exclude_hosts: a list of inventory_hostname values for which this item should be skipped
#
# desktop_custom_files:
#   - {type: 'web', src: 'https://yoursite.com/yourfile.txt', dest: '~/.yourfile', os_family: ['OpenBSD']}
system_custom_files: []

## *_custom_includes is a list of files that can be installed from the ansible server or a web site
# - path: path to file on the target system to modify
# - line: line to add/change
# - regexp: regular expression to use when looking for a line to change
# - backrefs: whether to enable use of backreferences in line to matches in regexp (e.g. '\1 new text \2')
# - insertafter: a line to insert 'line' after if regexp does not match (default: EOF)
# - insertbefore: a line to insert 'line' before if regexp does not match and insertafter is not set (e.g. BOF)
# - mode: permissions on the destination file
# - owner/group: ownership of the destination file
# - create: should the file be created if it does not exist (default: false)
# - backup: whether to make a backup of the unchanged file (default: false)
# - become: if elevated access is required to write the file
# - os_family: a list of ansible_os_family values for which the include pertains
# - exclude_hosts: a list of inventory_hostname values for which this item should be skipped
#
# desktop_custom_includes:
#   - {path: '~/.profile', line: '[ -r ~/.profile.local ] && . ~/.profile.local'}
system_custom_includes: []

## *_custom_settings is a list settings to add either to foo.conf or foo.conf.d/some-file.conf
# - dest_d: a destination file to be created/overwritten with a configuration option (e.g. /etc/foo.conf.d/1-foo.conf)
# - dest_f: a configuration file to modify with a configuration option
# - line: configuration line to change/add
# - regexp: regular expression to use when looking for a line to change
# - backrefs: whether to enable use of backreferences in line to matches in regexp (e.g. '\1 new text \2')
# - insertafter: a line to insert 'line' after if regexp does not match (default: EOF)
# - insertbefore: a line to insert 'line' before if regexp does not match and insertafter is not set (e.g. BOF)
# - mode: permissions on the destination file
# - owner/group: ownership of the destination file
# - dirmode: the permissions on any directories created in the destination file path
# - backup: whether to make a backup of the unchanged file (default: false)
# - become: if elevated access is required to write the file
# - os_family: a list of ansible_os_family values for which the setting pertains
# - exclude_hosts: a list of inventory_hostname values for which this item should be skipped
#
# desktop_custom_settings:
#   - {dest_d: '/etc/ssh/sshd_config.d/10-permit-root.conf', line: 'PermitRootLogin prohibit-password'}
system_custom_settings: []

## *_custom_repos is a list of repos that can be added to Debian-based and RedHat-based systems
# - name: the name of the repo
# - keyurl: URL to an Apt key (required if keyserver/keyid not defined)
# - keyserver: An Apt key server to use (required if keyurl not defined)
# - keyid: An Apt key ID (required if keyurl not defined)
# - debrepo: An Apt repo URL (either web page or ppa)
# - filename: A filename to store in /etc/apt/sources.list.d or /etc/yum.repos.d
# - reporpm: A path to an RPM file containing REPO information (may be a URL)
# - gpgkey: A path to a GPG key to use for the Yum repo (may be a URL)
# - yumrepo: A Yum repo URL
# - gpgcheck: Should the GPG key be checked for this repo (default: true)
# - metadata_expire: Time interval that the cached metadata for the Yum repo expires
# - enableyumrepos: A list of repos to enable before packages are installed/updated from it
# - disableyumrepos: A list of repos to disable after packages are installed/updated from it
# - packages: A list of packages to be added to the list of packages to install
# - become: if elevated access is required to add the repos (default: true)
# - os_family: a list of ansible_os_family values for which the repo pertains
# - exclude_hosts: a list of inventory_hostname values for which this item should be skipped
#
# desktop_custom_repos:
#   - {name: 'google-chrome', keyurl: 'https://dl.g...', gpgkey: 'https://dl.g...', yumrepo: 'http://dl...',
#      filename: 'google-chrome', packages: ['google-chrome-stable']}
system_custom_repos: []

## *_custom_groups is a list of groups to add a user to
# - name: User to add to groups
# - groups: Groups to add 'name' user to
# - append: Append the user to the groups or overwrite user's group membership with this list (default: false)
# - become: if elevated access is required modify groups (default: true)
# - os_family: a list of ansible_os_family values for which the file pertains
# - exclude_hosts: a list of inventory_hostname values for which this item should be skipped
#
# desktop_custom_groups:
#   - {name: '{{ ansible_user_id }}', groups: 'operator', os_family: ['OpenBSD']}
system_custom_groups: []

## *_custom_services is a list of services to enable/start
# - name: Name of the service to enable/start
# - os_family: a list of ansible_os_family values for which the service pertains
# - exclude_hosts: a list of inventory_hostname values for which this item should be skipped
system_custom_services: []

## *_custom_deb_files is a list of Debian packages to install (may be a URL)
system_custom_deb_files: []

## For the package lists:
## - common: installed no matter what OS
## - OpenBSD: installed when ansible_os_family == "OpenBSD"
## - Linux: installed when ansible_system == "Linux"
## - Debian: installed when ansible_os_family == "Debian"
## - RedHat: installed when ansible_os_family == "RedHat"

## Packages needed for this role to succeed
## Do not make changes to this file; copy the list to vars/main.yml and change there.
system_pkgs_install:
  common: []
  OpenBSD:
    - 'gtar--'
    - 'unzip--'
  Linux:
    - 'unzip'
  Debian: []
  RedHat: []

## Packages to install (not needed for the role to succeed)
## Do not make changes to this file; copy the list to vars/main.yml and change there.
system_packages:
  common: []
  OpenBSD: []
  Linux: []
  Debian: []
  RedHat: []

## A custom search domain can be added by defining dns_search_domain like the example below
# dns_search_domain: 'my.domain'

## A way to bail on adding the dns_search_domain in RedHat (e.g. the computer is not on its home network)
# dns_search_exception: '[ "$dg" != "192.168.25.1" -a "$dg" != "192.168.122.1" ] && unset dg && exit'

## SSL certificates
# custom_ssl_certs:
#   - {type: 'file', src: 'files/cert1.crt', dest: 'ca-cert1.crt'}
#   - {type: 'web', src: 'https://yoursite.my.domain/cert2.crt', dest: 'ca-cert2.crt'}
custom_ssl_certs: []

## The location for custom CA certificates in Debian & RedHat
ca_certification_dest:
  Debian: '/usr/local/share/ca-certificates'
  RedHat: '/etc/pki/ca-trust/source/anchors'
  OpenBSD: '/etc/ssl'
