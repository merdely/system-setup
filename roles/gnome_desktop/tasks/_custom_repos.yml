---
- block:
    - name: debian repo management
      block:
        - name: '_custom_repos : add {{ item.name }} repo key'
          apt_key:
            url: '{{ item.keyurl | default(omit) }}'
            keyserver: '{{ item.keyserver | default(omit) }}'
            id: '{{ item.keyid | default(omit) }}'
            state: 'present'
          become: '{{ item.become | default(true) }}'
          when:
            - ansible_os_family == 'Debian'
            - item.keyurl is defined or item.keyserver is defined
            - 'ansible_os_family in item.os_family|default([ansible_os_family])'
            - 'inventory_hostname not in item.exclude_hosts|default([])'

        - name: '_custom_repos : add {{ item.name }} repo'
          apt_repository:
            repo: '{{ item.debrepo | regex_replace("__X86_64__", "amd64") | regex_replace("__AARCH64__", "arm64") }}'
            filename: '{{ item.filename | default(omit) }}'
            codename: '{{ item.codename | default(omit) }}'
            update_cache: '{{ item.update_cache | default(true) }}'
          become: '{{ item.become | default(true) }}'
          when:
            - 'ansible_os_family in item.os_family|default([ansible_os_family])'
            - 'inventory_hostname not in item.exclude_hosts|default([])'
      when: ansible_os_family == 'Debian'

    - name: redhat repo management
      block:
        - name: '_custom_repos : add {{ item.name }} repo rpm'
          package:
            name: '{{ item.reporpm }}'
            state: 'present'
          become: '{{ item.become | default(true) }}'
          when:
            - item.reporpm is defined
            - 'ansible_os_family in item.os_family|default([ansible_os_family])'
            - 'inventory_hostname not in item.exclude_hosts|default([])'

        - name: '_custom_repos : add {{ item.name }} repo key'
          rpm_key:
            key: '{{ item.gpgkey }}'
            state: 'present'
          become: '{{ item.become | default(true) }}'
          when:
            - item.gpgkey is defined
            - 'ansible_os_family in item.os_family|default([ansible_os_family])'
            - 'inventory_hostname not in item.exclude_hosts|default([])'

        - name: '_custom_repos : add {{ item.name }} repo'
          yum_repository:
            name: '{{ item.filename | mandatory }}'
            description: '{{ item.name }} repo'
            baseurl: '{{ item.yumrepo }}'
            gpgkey: '{{ item.gpgkey }}'
            gpgcheck: '{{ item.gpgcheck | default(true) }}'
            metadata_expire: '{{ item.metadata_expire | default(omit) }}'
            enabled: '{{ item.enabled | default(true) }}'
          become: '{{ item.become | default(true) }}'
          when:
            - item.yumrepo is defined
            - 'ansible_os_family in item.os_family|default([ansible_os_family])'
            - 'inventory_hostname not in item.exclude_hosts|default([])'

        - name: '_custom_repos | add {{ item.name }} to repos to enable list'
          set_fact:
            repos_to_enable: '{{ repos_to_enable | default([]) | union(item.enableyumrepos | default([item.name])) }}'
          notify: enable rpm repos
          when:
            - 'ansible_os_family in item.os_family|default([ansible_os_family])'
            - 'inventory_hostname not in item.exclude_hosts|default([])'

        - name: '_custom_repos | add {{ item.name }} to repos to disable list'
          set_fact:
            repos_to_disable: '{{ repos_to_disable | default([]) | union(item.disableyumrepos) }}'
          notify: disable rpm repos
          when:
            - item.disableyumrepos is defined
            - 'ansible_os_family in item.os_family|default([ansible_os_family])'
            - 'inventory_hostname not in item.exclude_hosts|default([])'
      when: ansible_os_family == 'RedHat'

    - name: '_custom_repos : add {{ item.name }} packages to the list of packages to install'
      set_fact:
        packages_to_install: '{{ packages_to_install | default([]) | union(item.packages) }}'
      changed_when: true
      notify: '{{ ["update package cache"] | union(item.handlers | default([])) | union(["install packages"]) }}'
      when:
        - item.packages is defined
        - 'ansible_os_family in item.os_family|default([ansible_os_family])'
        - 'inventory_hostname not in item.exclude_hosts|default([])'
  rescue:
    - name: '_custom_repos : log that {{ item.name }} failed'
      set_fact:
        task_failures: '{{ task_failures | default([]) | union(["add " + item.name + " repo"]) }}'
      changed_when: true
      notify: list failed tasks
  when: ansible_os_family == 'Debian' or ansible_os_family == 'RedHat'
