# This is a helper playbook to be included in gnome_settings.yml.
# It uses the gsettings command to set dconf/gnome settings.
# This helper function does not work quite right
# x It will NOT write a dconf setting if gnome isn't aware of it
# - It respects the DBUS_SESSION_BUS_ADDRESS variable
# - It's idempotent by reading first and writing only if it changes
---
- name: 'gsettings_command : get {{ item.key }} dconf setting'
  shell: 'env $(cat ~/.cache/.dbusaddress) gsettings get {{ item.path }} {{ item.key }}'
  changed_when: false
  register: result
  tags: 'gnome_settings'
  when:
    - 'ansible_os_family in item.os_family|default([ansible_os_family])'
    - 'inventory_hostname not in item.exclude_hosts|default([])'
    - 'inventory_hostname in item.include_hosts|default([inventory_hostname])'

- block:
    - name: 'gsettings_command : set {{ item.key }} dconf setting to "{{ item.value }}"'
      shell: 'env $(cat ~/.cache/.dbusaddress) gsettings set {{ item.path }} {{ item.key }} "{{ item.value }}"'
  rescue:
    - name: 'gsettings_command : log that gsettings-set command failed'
      set_fact:
        task_failures: '{{ task_failures | default([]) | union(["gsettings set {{ item.path }}/{{ item.key }}"]) }}'
      changed_when: true
      notify: list failed tasks
  tags: 'gnome_settings'
  when:
    - result.stdout|string != item.value|string
    - 'ansible_os_family in item.os_family|default([ansible_os_family])'
    - 'inventory_hostname not in item.exclude_hosts|default([])'
    - 'inventory_hostname in item.include_hosts|default([inventory_hostname])'
